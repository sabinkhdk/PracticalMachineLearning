q()
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages('AppliedPredictiveModeling')
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
trainIndex = createDataPartition(diagnosis, p = 0.50, list=FALSE)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(traning)
head(training)
hist(training$Superplasticizer)
hist(log(training$Superplasticizer+1)
)
hist(training$Superplasticizer)
set.seed(3433)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
??preProcess
IL_str <- grep("^IL", colnames(training), value = TRUE)
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.8)
preProc$rotation
IL_str
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
q()
setwd("~/GitHub/PracticalMachineLearning")
library("AppliedPredictiveModeling")
library("caret")
library("ElemStatLearn")
library("pgmm")
library("rpart")
library("ggplot2")
install.packages("ElemStatLearn")
install.packages("pgmm")
library("ElemStatLearn")
library("pgmm")
data(segmentationOriginal)
head(segmentation)
head(segmentationOriginal)
train = segmentationOriginal[SegementatioOriginal$Case=="Train",]
train = segmentationOriginal[SegementatioOriginal$Case="Train",]
train = segmentationOriginal[,SegementatioOriginal$Case="Train"]
train = segmentationOriginal[SegmentatioOriginal$Case="Train",]
train = segmentationOriginal[SegmentatioOriginal$Case=="Train",]
colnames(SegmentationOriginal)
colnames(segmentationOriginal)
train = segmentationOriginal[SegmentationOriginal$Case=="Train",]
head(SegmentationOriginal$case)
head(SegmentationOriginal$Case)
head(segmentationOriginal$Case)
train = segmentationOriginal[SegmentationOriginal$Case="Train",]
train = subset(segmentationOriginal, Case=="Train")
test = subset(segmentationOriginal, Case=="Test")
modelFit <- train(Class ~ ., data = train, method = "rpart")
library("rpart")
modelFit <- train(Class ~ ., data = train, method = "rpart")
library("caret")
library("ElemStatLearn")
library("pgmm")
library("rpart")
library("ggplot2")
modelFit <- train(Class ~ ., data = train, method = "rpart")
set.seed(125)
inTrain <- createDataPartition(y = segmentationOriginal$Case, list = FALSE)
train = subset(segmentationOriginal, Case=="Train")
test = subset(segmentationOriginal, Case=="Test")
modelFit <- train(Class ~ ., data = train, method = "rpart")
install.packages('e1071', dependencies=TRUE)
modelFit <- train(Class ~ ., data = train, method = "rpart")
modelFit$finalModel
fancyRpartPlot(model$finalModel)
library("rattle")
install.packages("rattle")
library("rattle")
library("rattle")
fancyRpartPlot(model$finalModel)
fancyRpartPlot(modelFit$finalModel)
modelFit$finalModel
fancyRpartPlot(modelFit$finalModel)
library("rpart")
fancyRpartPlot(modelFit$finalModel)
install.packages("rpart.plot")
fancyRpartPlot(modelFit$finalModel)
modelFit$finalModel
data(olive)
olive = olive[,-1]
model<-train(Area ~ ., data=olive, method="rpart")
model$finalmodel
model$finalmMdel
model$finalModel
fancyRpartPlot(modelFit$finalModel)
fancyRpartPlot(model$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
predict(model, newdata)
set.seed(1234)
model <- train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(1234)
model <- train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
missClass <- function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(model, trainSA))
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
model <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
library("AppliedPredictiveModeling")
model <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
library("ElemStatLearn")
model <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
library("rpart")
model <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
??randomForest
library(randomForest)
rfNews()
model <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
var <- varImp(model)
order(var)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
model <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
var <- varImp(model)
order(var)
data(vowel.train)
data(vowel.test)
set.seed(33833)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
model <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
var <- varImp(model)
order(var)
missClass(trainSA$chd, predict(model, trainSA))
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(1234)
model <- train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
missClass <- function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(model, trainSA))
missClass(trainSA$chd, predict(model, testSA))
missClass(testSA$chd, predict(model, testSA))
q()
